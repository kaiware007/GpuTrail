#pragma kernel UpdateTrailIdxBuffer NUM_THREAD_X=32

#include "GpuTrailCSInclude.hlsl"


////////////////////////////////////////////////////////////////////////////////
// UpdateTrailIdxBuffer
////////////////////////////////////////////////////////////////////////////////
float _TrailWidth;
float3 _CameraPos;
float4x3 _CameraFrustumNormals;
StructuredBuffer<Node> _NodeBuffer;
AppendStructuredBuffer<uint> _TrailIndexBufferAppend;

[numthreads(NUM_THREAD_X,1,1)]
void UpdateTrailIdxBuffer (uint3 id : SV_DispatchThreadID)
{
	uint trailIdx = id.x;
	if ( trailIdx < _TrailNum )
	{
		uint nodeIdxStart = calcNodeIdx(trailIdx, 0);
		uint nodeIdxEnd = nodeIdxStart + _NodeNumPerTrail;
		uint nodeIdxEndHalf = nodeIdxStart + _NodeNumPerTrail / 2;
		for(uint nodeIdx = nodeIdxStart; nodeIdx < nodeIdxEndHalf; nodeIdx++)
		{
			Node node = _NodeBuffer[nodeIdx];

			if ( node.time > 0)
			{
				// CheckCulling!
				float3 posFromCamera = node.pos - _CameraPos;

				if ( 
					/*
					(dot(_CameraFrustumNormals[0], posFromCamera) > -_TrailWidth) 
					&& (dot(_CameraFrustumNormals[1], posFromCamera) > -_TrailWidth)
					&& (dot(_CameraFrustumNormals[2], posFromCamera) > -_TrailWidth)
					&& (dot(_CameraFrustumNormals[3], posFromCamera) > -_TrailWidth)
					*/
					all(mul(_CameraFrustumNormals, posFromCamera) > -_TrailWidth)
				)
				{
					_TrailIndexBufferAppend.Append(trailIdx);
					break;
				}
			}

			uint backIdx = nodeIdxEnd - 1 - nodeIdx;
			Node nodeBack = _NodeBuffer[backIdx];

			if(nodeBack.time > 0)
			{
				// CheckCulling!
				float3 posFromCamera = nodeBack.pos - _CameraPos;

				if ( 
					/*
					(dot(_CameraFrustumNormals[0], posFromCamera) > -_TrailWidth) 
					&& (dot(_CameraFrustumNormals[1], posFromCamera) > -_TrailWidth)
					&& (dot(_CameraFrustumNormals[2], posFromCamera) > -_TrailWidth)
					&& (dot(_CameraFrustumNormals[3], posFromCamera) > -_TrailWidth)
					*/
					all(mul(_CameraFrustumNormals, posFromCamera) > -_TrailWidth)
				)
				{
					_TrailIndexBufferAppend.Append(trailIdx);
					break;
				}
			}
		}
	}
}
