#pragma kernel AppendNode NUM_THREAD_X=32
#pragma kernel Reset NUM_THREAD_X=32

#pragma multi_compile _ IGNORE_ORIGIN
#pragma multi_compile _ COLOR_ENABLE

#include "GpuTrailCSInclude.hlsl"

uint _InputCount;
StructuredBuffer<float3> _InputBuffer_Pos;
#ifdef COLOR_ENABLE
StructuredBuffer<float4> _InputBuffer_Color;
#endif
RWStructuredBuffer<Trail> _TrailBuffer;
RWStructuredBuffer<Node> _NodeBuffer;

[numthreads(NUM_THREAD_X,1,1)]
void AppendNode (uint3 id : SV_DispatchThreadID)
{
	uint trailIdx = id.x;
	if ( trailIdx < _TrailNum )
	{
		Trail trail = _TrailBuffer[trailIdx];
		uint totalInputNum = trail.totalInputNum;


		for(uint validCount = 0; validCount<_InputCount; ++validCount)
		{
			uint inputBufferIdx = _TrailNum * validCount + trailIdx;
			float3 inputPos = _InputBuffer_Pos[inputBufferIdx];

	#ifdef IGNORE_ORIGIN
			if (all(inputPos == 0)) break;
	#endif
		}


		bool isFirst = (totalInputNum==0);
		float lastTime = _Time;
		float3 lastPos = (3.402823466e+38F).xxx;  // float max
		if ( !isFirst)
		{
			Node lastNode = _NodeBuffer[calcNodeIdx(trailIdx, totalInputNum-1)];
			lastTime = lastNode.time;
			lastPos =lastNode.pos;
		}
		else if (validCount>0)
		{
			trail.startTime = _Time;
		}


		for(uint i = 0; i<validCount; ++i)
		{
			uint inputBufferIdx = _TrailNum * i + trailIdx;
			float3 inputPos = _InputBuffer_Pos[inputBufferIdx];
			
			if ( _MinNodeDistance <= distance(inputPos, lastPos))
			{
				Node node = (Node)0;
				node.pos = inputPos;
				node.time = lerp(lastTime, _Time, (float)(i+1)/validCount);
	#ifdef COLOR_ENABLE
				node.color = _InputBuffer_Color[inputBufferIdx];
	#endif
				uint nodeIdx = calcNodeIdx(trailIdx, totalInputNum);
				_NodeBuffer[nodeIdx] = node;
				totalInputNum++;

				lastPos = inputPos;
			}
		}

		if( totalInputNum != trail.totalInputNum)
		{
			trail.totalInputNum = totalInputNum;
			_TrailBuffer[trailIdx] = trail;
		}
	}
}

[numthreads(NUM_THREAD_X,1,1)]
void Reset (uint3 id : SV_DispatchThreadID)
{
	uint trailIdx = id.x;
	if ( trailIdx < _TrailNum )
	{
		Trail trail;
		trail.totalInputNum = 0;
		trail.startTime = 0;
		trail.frameCount = -1;
		trail.selectedLod = -1;
		_TrailBuffer[trailIdx] = trail;
	}
}