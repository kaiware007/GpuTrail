#pragma kernel UpdateTrailLodBuffer NUM_THREAD_X=32
#pragma kernel UpdateTrailIndexBuffer NUM_THREAD_X=32

#pragma multi_compile_local __ GPUTRAIL_TRAIL_INDEX_ON

#include "GpuTrailCSInclude.hlsl"
#include "GpuTrailIndexInclude.hlsl"
#include "GpuTrailAABBCSInclude.hlsl"

////////////////////////////////////////////////////////////////////////////////
// UpdateTrailIdxBuffer
////////////////////////////////////////////////////////////////////////////////
float3 _CameraPos;
StructuredBuffer<Node> _NodeBuffer;
StructuredBuffer<float> _LodDistanceBuffer; // Order By distance
RWStructuredBuffer<uint> _TrailLodBufferW;
StructuredBuffer<AABB> _BoundsBuffer;

[numthreads(NUM_THREAD_X,1,1)]
void UpdateTrailLodBuffer (uint3 id : SV_DispatchThreadID)
{
	uint trailIdxBufferIdx = id.x;
	if ( trailIdxBufferIdx < GetTrailNum() )
	{
		uint trailIdx = GetTrailIdx(trailIdxBufferIdx);

		AABB bounds = _BoundsBuffer[trailIdx];
		float3 center = (bounds.minPos + bounds.maxPos) * 0.5 - _CameraPos;
		float3 minPos = bounds.minPos - _CameraPos;
		float3 maxPos = bounds.maxPos - _CameraPos;
		float3 p2 = float3(maxPos.x, minPos.y, minPos.z);
		float3 p3 = float3(maxPos.x, minPos.y, maxPos.z);
		float3 p4 = float3(minPos.x, minPos.y, maxPos.z);
		float3 p5 = float3(minPos.x, maxPos.y, minPos.z);
		float3 p6 = float3(maxPos.x, maxPos.y, minPos.z);
		float3 p7 = float3(minPos.x, maxPos.y, maxPos.z);
		
		float minDistanceSq = dot(center, center);
		minDistanceSq = min(minDistanceSq, dot(minPos, minPos));
		minDistanceSq = min(minDistanceSq, dot(maxPos, maxPos));
		minDistanceSq = min(minDistanceSq, dot(p2, p2));
		minDistanceSq = min(minDistanceSq, dot(p3, p3));
		minDistanceSq = min(minDistanceSq, dot(p4, p4));
		minDistanceSq = min(minDistanceSq, dot(p5, p5));
		minDistanceSq = min(minDistanceSq, dot(p6, p6));
		minDistanceSq = min(minDistanceSq, dot(p7, p7));

		float minDistance = sqrt(minDistanceSq);

		uint num, stride;
		_LodDistanceBuffer.GetDimensions(num, stride);

		uint nextLod=1;
		for(; nextLod<num; ++nextLod)
		{
			if (minDistance < _LodDistanceBuffer[nextLod])
			{
				break;
			}
		}

		_TrailLodBufferW[trailIdx] = nextLod-1;
	}
}


////////////////////////////////////////////////////////////////////////////////
// UpdateTrailIdxBuffer
////////////////////////////////////////////////////////////////////////////////
uint _CurrentLod;
StructuredBuffer<uint> _TrailLodBuffer;
AppendStructuredBuffer<uint> _TrailIdxBufferAppend;

[numthreads(NUM_THREAD_X,1,1)]
void  UpdateTrailIndexBuffer (uint3 id : SV_DispatchThreadID)
{
	uint trailIdxBufferIdx = id.x;
	if ( trailIdxBufferIdx < GetTrailNum() )
	{
		uint trailIdx = GetTrailIdx(trailIdxBufferIdx);
		if (_TrailLodBuffer[trailIdx] == _CurrentLod)
		{
			_TrailIdxBufferAppend.Append(trailIdx);
		}
	}
}